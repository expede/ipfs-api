{-# OPTIONS_GHC -fno-warn-incomplete-uni-patterns #-}

module Main (main) where

import           RIO
import qualified RIO.ByteString.Lazy                   as Lazy

import           Servant.API
import           Servant.Client.Core.ClientError

import qualified Fission.Internal.UTF8                 as UTF8

import qualified Fission.Web.Auth.Token.Bearer.Types   as Bearer
import           Fission.Web.Auth.Token.JWT.Types      as JWT
import           Fission.Web.Auth.Token.JWT.Validation

import           Fission.Web.Auth.Token.JWT.Resolver   as Proof

import           Test.Tasty.Bench

main :: IO ()
main =
  defaultMain
    [ bgroup "Textable.encode" encode
    , signatureValidation
    ]

signatureValidation :: Benchmark
signatureValidation =
  bgroup "JWT signature Validation"
    [ bgroup "Validate 2048-bit RSA Signature" validateRSA2048Signature
    , bgroup "RSA-based UCAN checks"           validateRSA2048UCAN
    ]

validateRSA2048UCAN :: [Benchmark]
validateRSA2048UCAN =
  [ bench "One   Level"  $ whnf (pureChecks smallRSAContent)  smallRSAUCAN
  , bench "Two   Levels" $ whnf (pureChecks mediumRSAContent) mediumRSAUCAN
  , bench "Three Levels" $ whnf (pureChecks largeRSAContent)  largeRSAUCAN
  ]

validateRSA2048Signature :: [Benchmark]
validateRSA2048Signature =
    [ bench "One level"    $ whnf (runNoResolver . check' smallRSAContent  smallRSAUCAN)  inBounds
    , bench "Two levels"   $ whnf (runNoResolver . check' mediumRSAContent mediumRSAUCAN) inBounds
    , bench "Three levels" $ whnf (runNoResolver . check' largeRSAContent  largeRSAUCAN)  inBounds
    ]
      where
        JWT {claims = JWT.Claims {exp = inBounds}} = largeRSAUCAN

encode :: [Benchmark]
encode =
  [ bench "Strict ByteString" $ nf UTF8.encode ("hello world" :: ByteString)
  , bench "Lazy ByteString"   $ nf UTF8.encode ("hello world" :: Lazy.ByteString)
  ]

smallRSAContent :: RawContent
smallRSAUCAN    :: JWT
Right (Bearer.Token smallRSAUCAN smallRSAContent) = parseUrlPiece "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsInVhdiI6IjEuMC4wIn0.eyJhdWQiOiJkaWQ6a2V5OnoxM1YzU29nMllhVUtoZEdDbWd4OVVadVcxbzFTaEZKWWM2RHZHWWU3TlR0Njg5Tm9MMnNWdVFQQUpRbnFIOEVidG1zQXR5dFJmbkRrTHdnS3dnaGdHUEZKamFHV1F3V29RamhWQ3U2VnlpQ0g5YUJKWk5WWFlFTW5LTXFmMW5MVFVqS0dueGlCamMyTVJiVzVtWHEyRXBucGRXUThjUUVYeXdrYWlNQzVTNTNHMmVYNnRadmFtM1J5U3BRaFI3dFN0cWFCRmU4TE1nRFQ5ZVJ2UHlzUnhXY2NScEJRZ0RtenF2NEhKakdyZWZXbktHa0JMU2JRbVlzQk1kODhaY3MybXVEa25ockxwNndoU3NxUDE1em9OZ1RhcUpVRHRhREI4Z296NTVnVmdiOVpIaGVueVFCVFRGV2JjWVRvcWlEbVhMam5mS0tyWmd6S24zMW1NNDNEOEh6aFJyaG5VZkVHbWtZY3dyZkdzWFhxdFRYa1R3TnMxUEFzZmtWcjJTcXg1Q3RVd1ZweDlNZHRKUjFzY2h0N1FVIiwiZXhwIjozMjcxMjcyNDgxMiwiZmN0IjpbXSwiaXNzIjoiZGlkOmtleTp6MTNWM1NvZzJZYVVLaGRHQ21neDlVWnVXMW8xU2hGSlljNkR2R1llN05UdDY4OU5vTDJZcDk1aXV2c0NHTVp6WlRlUFpQRzFpVVJNeWZpR3E5WVlHNEZLYWt6dTJ3c3BVb1FHcHZwSmdxRjg2RFBFMVBjSjFWcENSNUR4Nk1MRk5Fc2I5RWJhWkp1SGtOSGU4Z0RNeDJNYW1NTHM4U05vYkFrVEc5dUVNaWJ5Rm9hUFBjdGJxRWRlRWdyQnJRTURvYWhwSHRMTllHOVhyM01iUUpuNjRLNmdNSDcyZkg2cUQyMlBmSmljN3RBZlRGWFhyV3hud2twYWNwU0g5aTd4U3E1eGhCeGE4a3RNc0tXdk1zWFUxUFkxTUJMZnFlVnkyMUhlZVV4OHZOV3RqRlFjVmtzczRXTGlDY2k4enVMUTdCb2JaMTE2UWpKbUhNTGNVOUVMNXEyclRVbmhBRWg4OUpUU3VjSzhGanRvZnR2eXhWTVF6R3BiYVRrdThKRHhLdTJtS3NOb05IejdxUktiQVlIQVo3VyIsIm5iZiI6MTYwODcyNDc1MiwicHRjIjoiQVBQRU5EIiwicnNjIjoiKiJ9.ebkpn5KMKN3EgUnFrKVDj7SDpO6XbPu6QYePH0zIKM5sRr5XYIsDW1FSMKw9uO5ofvmQM_6vBDpPamcyR6BK73jPi47V_MISy8ENEVvpELXBsu4bpqRFbpoXzl0-XT6AVUy3eB-RCKxDZJRhvbnY8Wmg-D7jVZbYXa8_KjDVq6tA6MFqk46RLmvwopIo_EvJ4S41c8xCm31FjXnpklfjMxfGLPxKhCuaLC0qCiu44_XU7larw8ygsRlj4qJdgBQqqqmEfc-IXcb1YO2p5ToogDjhAvGfnITFGWslfNV6wQKxmGgmMjcFPuQ-CQ8wzypkw1c1BV3yOiJEdhDbFx1jUg"

mediumRSAContent :: RawContent
mediumRSAUCAN    :: JWT
Right (Bearer.Token mediumRSAUCAN mediumRSAContent) = parseUrlPiece "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsInVhdiI6IjEuMC4wIn0.eyJhdWQiOiJkaWQ6a2V5OnoxM1YzU29nMllhVUtoZEdDbWd4OVVadVcxbzFTaEZKWWM2RHZHWWU3TlR0Njg5Tm9MMm93enFrUmlpWHFKeGcyelJtdWE1TWlLOXkzNmpGSlBFZ1ZEUm1jb01YczQ1dmF6aUZTNXh3d043ZW55WWJBTkVwY0dQc21rUUc1cjNLaU5IclVjUE5wVndmNFhoTW44UmNWTWV6b0t6RUxYQ3FraFFvN1dWYzZXR2dEYTZuRkx6aXBtZmhYVFFEaEZDeU1TNnRGU2VQZU1wYzdDUTJFNkVkUkE2UTZIdmhqVVRjRDQyS1dUZ0ttVXRXcDJMYWhMTm00bzlGdXhqQmFibmlvaFp1N0Z0eTRmY2t2NlZNYWZHNGdVeVlxdGVnWm1waXBNZEpWN2VoZTJlQXQ3QlZVcmJTYkVxNmdWdlM5TVV1cTM5ZTJUTjJUOTh1dm1UTHZQRHh3ZkJMcDJkRll3Tm90dUV0RFB5QVVNYlllVFlSSEpqdDRaRjlvUkFDUEtKOWNmQzhZM3hxRDI4eXJFUGRvaDZzU0o0IiwiZXhwIjozMjcxMjcyNDgxMiwiZmN0IjpbXSwiaXNzIjoiZGlkOmtleTp6MTNWM1NvZzJZYVVLaGRHQ21neDlVWnVXMW8xU2hGSlljNkR2R1llN05UdDY4OU5vTDJzVnVRUEFKUW5xSDhFYnRtc0F0eXRSZm5Ea0x3Z0t3Z2hnR1BGSmphR1dRd1dvUWpoVkN1NlZ5aUNIOWFCSlpOVlhZRU1uS01xZjFuTFRVaktHbnhpQmpjMk1SYlc1bVhxMkVwbnBkV1E4Y1FFWHl3a2FpTUM1UzUzRzJlWDZ0WnZhbTNSeVNwUWhSN3RTdHFhQkZlOExNZ0RUOWVSdlB5c1J4V2NjUnBCUWdEbXpxdjRISmpHcmVmV25LR2tCTFNiUW1Zc0JNZDg4WmNzMm11RGtuaHJMcDZ3aFNzcVAxNXpvTmdUYXFKVUR0YURCOGdvejU1Z1ZnYjlaSGhlbnlRQlRURldiY1lUb3FpRG1YTGpuZktLclpnektuMzFtTTQzRDhIemhScmhuVWZFR21rWWN3cmZHc1hYcXRUWGtUd05zMVBBc2ZrVnIyU3F4NUN0VXdWcHg5TWR0SlIxc2NodDdRVSIsIm5iZiI6MTYxMDU4NjcxNCwicHJmIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0lzSW5WaGRpSTZJakV1TUM0d0luMC5leUpoZFdRaU9pSmthV1E2YTJWNU9ub3hNMVl6VTI5bk1sbGhWVXRvWkVkRGJXZDRPVlZhZFZjeGJ6RlRhRVpLV1dNMlJIWkhXV1UzVGxSME5qZzVUbTlNTW5OV2RWRlFRVXBSYm5GSU9FVmlkRzF6UVhSNWRGSm1ia1JyVEhkblMzZG5hR2RIVUVaS2FtRkhWMUYzVjI5UmFtaFdRM1UyVm5scFEwZzVZVUpLV2s1V1dGbEZUVzVMVFhGbU1XNU1WRlZxUzBkdWVHbENhbU15VFZKaVZ6VnRXSEV5UlhCdWNHUlhVVGhqVVVWWWVYZHJZV2xOUXpWVE5UTkhNbVZZTm5SYWRtRnRNMUo1VTNCUmFGSTNkRk4wY1dGQ1JtVTRURTFuUkZRNVpWSjJVSGx6VW5oWFkyTlNjRUpSWjBSdGVuRjJORWhLYWtkeVpXWlhia3RIYTBKTVUySlJiVmx6UWsxa09EaGFZM015YlhWRWEyNW9ja3h3Tm5kb1UzTnhVREUxZW05T1oxUmhjVXBWUkhSaFJFSTRaMjk2TlRWblZtZGlPVnBJYUdWdWVWRkNWRlJHVjJKaldWUnZjV2xFYlZoTWFtNW1TMHR5V21kNlMyNHpNVzFOTkRORU9FaDZhRkp5YUc1VlprVkhiV3RaWTNkeVprZHpXRmh4ZEZSWWExUjNUbk14VUVGelptdFdjakpUY1hnMVEzUlZkMVp3ZURsTlpIUktVakZ6WTJoME4xRlZJaXdpWlhod0lqb3pNamN4TWpjeU5EZ3hNaXdpWm1OMElqcGJYU3dpYVhOeklqb2laR2xrT210bGVUcDZNVE5XTTFOdlp6SlpZVlZMYUdSSFEyMW5lRGxWV25WWE1XOHhVMmhHU2xsak5rUjJSMWxsTjA1VWREWTRPVTV2VERKWmNEazFhWFYyYzBOSFRWcDZXbFJsVUZwUVJ6RnBWVkpOZVdacFIzRTVXVmxITkVaTFlXdDZkVEozYzNCVmIxRkhjSFp3U21keFJqZzJSRkJGTVZCalNqRldjRU5TTlVSNE5rMU1SazVGYzJJNVJXSmhXa3AxU0d0T1NHVTRaMFJOZURKTllXMU5USE00VTA1dllrRnJWRWM1ZFVWTmFXSjVSbTloVUZCamRHSnhSV1JsUldkeVFuSlJUVVJ2WVdod1NIUk1UbGxIT1ZoeU0wMWlVVXB1TmpSTE5tZE5TRGN5WmtnMmNVUXlNbEJtU21sak4zUkJabFJHV0ZoeVYzaHVkMnR3WVdOd1UwZzVhVGQ0VTNFMWVHaENlR0U0YTNSTmMwdFhkazF6V0ZVeFVGa3hUVUpNWm5GbFZua3lNVWhsWlZWNE9IWk9WM1JxUmxGalZtdHpjelJYVEdsRFkyazRlblZNVVRkQ2IySmFNVEUyVVdwS2JVaE5UR05WT1VWTU5YRXljbFJWYm1oQlJXZzRPVXBVVTNWalN6aEdhblJ2Wm5SMmVYaFdUVkY2UjNCaVlWUnJkVGhLUkhoTGRUSnRTM05PYjA1SWVqZHhVa3RpUVZsSVFWbzNWeUlzSW01aVppSTZNVFl3T0RjeU5EYzFNaXdpY0hSaklqb2lRVkJRUlU1RUlpd2ljbk5qSWpvaUtpSjkuZWJrcG41S01LTjNFZ1VuRnJLVkRqN1NEcE82WGJQdTZRWWVQSDB6SUtNNXNScjVYWUlzRFcxRlNNS3c5dU81b2Z2bVFNXzZ2QkRwUGFtY3lSNkJLNzNqUGk0N1ZfTUlTeThFTkVWdnBFTFhCc3U0YnBxUkZicG9YemwwLVhUNkFWVXkzZUItUkNLeERaSlJodmJuWThXbWctRDdqVlpiWVhhOF9LakRWcTZ0QTZNRnFrNDZSTG12d29wSW9fRXZKNFM0MWM4eENtMzFGalhucGtsZmpNeGZHTFB4S2hDdWFMQzBxQ2l1NDRfWFU3bGFydzh5Z3NSbGo0cUpkZ0JRcXFxbUVmYy1JWGNiMVlPMnA1VG9vZ0RqaEF2R2ZuSVRGR1dzbGZOVjZ3UUt4bUdnbU1qY0ZQdVEtQ1E4d3p5cGt3MWMxQlYzeU9pSkVkaERiRngxalVnIiwicHRjIjoiQVBQRU5EIiwicnNjIjoiKiJ9.NRFNCmOtlfwH-Xv57ZZpFQD37SG7-7su_DxxWzz4M1pmkE9T1J1IoBpsYynIEOuyYkosP91MAhVcjeNi4_OO4-XoVmzeGqnSusUGmARf8YcemfKWLeYPuOOhLc2I7wgRpPj-dGUYSFH_kVYKpeP3HPvV_57WRVoyYCqW3LwWbB3RdKIPxuqx09EIeGjjIk3b-pNAhBTrrRLCtd8UNeO2MF9csrW-ThKaRS71wzJc-yYoSM54uhOiidkvsk-f23LQ8ISr9JiHRp2ReaL4SZ6zN3a3ottWCkjT3lAZM6gvI_qcLeVsO5swwLxXP9gzERUR3tHR_D9JWn7X1cOVYuGyEA"

largeRSAContent :: RawContent
largeRSAUCAN    :: JWT
Right (Bearer.Token largeRSAUCAN largeRSAContent) = parseUrlPiece "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsInVhdiI6IjEuMC4wIn0..gZY8RZvCHrwsqDlVXiH3HOSnDq00smBrYWPcEMQb4oGpixT8dOMXDXbGCC6QrWkc_6L903_Tep0SYYkdRbr2kP4r3O5D72cKkAlEIh2c8TAQ8V5MDyvZ_siXkztuaH5raQlxdx1uyrVz8TWzvHbd88Go51rYNsrc0YJLbANZ9DG0OQcXfwjICmwFn_tIT4EBYTjOgDNter3dR91aDRu57rzQc_wPw9Gh97CCkIAbDs0XegW6RjvYBRSsU1NyQOQRcIy6hGcChC5OZ8Zgq8wvHT39f-OHqkFQMShBe5rzC61c-Kf_NLHMrCDCQHIbWO0IQiVnkUN42PfGequ0WkgSrA"

newtype NoResolver a = NoResolver { runNoResolver :: Identity a }
  deriving newtype
    ( Functor
    , Applicative
    , Monad
    , Eq
    , Show
    )

data MockedReason = MockedReason
  deriving (Show, Eq, Exception)

instance Proof.Resolver NoResolver where
  resolve cid = return . Left $ CannotResolve cid (ConnectionError $ toException MockedReason)
